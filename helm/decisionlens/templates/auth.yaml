kind: Deployment
apiVersion: apps/v1
metadata: 
  name: auth-deployment
  labels: 
    app: auth
    {{- include "decisionlens.labels" . | nindent 4 }}
  {{- with .Values.service.auth.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
  {{- with .Values.global.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.service.auth.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.service.auth.replicas }}
  selector:
    matchLabels:
      app: auth
      {{- include "decisionlens.selectorLabels" . | nindent 6 }}
    {{- with .Values.service.auth.selectorLabels }}
      {{- toYaml . | nindent 6 }}
    {{- end }}
  template:
    metadata:
      labels:
        app: auth
        {{- include "decisionlens.selectorLabels" . | nindent 8 }}
      {{- with .Values.service.auth.selectorLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      annotations:
      {{- with .Values.global.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.service.auth.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.jwt.publicKey }}
      volumes:
      - name: jwt-keys-volume
        secret:
          secretName: jwt-keys-secret
      {{- end }}
      containers:
      - name: auth
        image: {{ .Values.service.image.url }}/{{ .Values.service.auth.tag }}
        resources:
          requests:
            memory: "1000Mi"
            cpu: "1000m"
          limits:
            memory: "4000Mi"
            cpu: "2000m"
        ports:
        - containerPort: {{ .Values.service.auth.port }}    
        imagePullPolicy: Always
        {{- if .Values.jwt.publicKey }}
        volumeMounts:
        - name: jwt-keys-volume
          readOnly: true
          mountPath: /jwt-keys
        {{- end }}
        env:        
        - name: service.url.apigateway
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: apigateway-service-url
        - name: database.jdbcUrl
          value: jdbc:mysql://{{ .Values.database.host }}:{{ .Values.database.port }}/auth?{{ include "decisionlens.jdbc.options" . }}
        - name: database.username
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-username
        - name: database.password
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-password
        - name: database.dlconf.jdbcUrl
          value: jdbc:mysql://{{ .Values.database.host }}:{{ .Values.database.port }}/dlconf?{{ include "decisionlens.jdbc.options" . }}
        - name: database.dlconf.username
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-username
        - name: database.dlconf.password
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-password
        - name: cacheServers
          valueFrom:
            configMapKeyRef: 
              name: {{ .Release.Name }}-configmap
              key: memcached-service-url
        - name: elastic.server
          valueFrom:
            configMapKeyRef: 
              name: {{ .Release.Name }}-configmap
              key: elastic-service-url
        - name: jwt.secret
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: jwt-secret
        - name: spring.rabbitmq.host
          valueFrom: 
            configMapKeyRef: 
              name: {{ .Release.Name }}-configmap
              key: rabbitmq-host
        - name: spring.rabbitmq.port
          valueFrom: 
            configMapKeyRef: 
              name: {{ .Release.Name }}-configmap
              key: rabbitmq-port
        - name: spring.rabbitmq.username
          valueFrom: 
            secretKeyRef: 
              name: {{ .Release.Name }}-secret
              key: rabbitmq-username
        - name: spring.rabbitmq.password
          valueFrom: 
            secretKeyRef: 
              name: {{ .Release.Name }}-secret
              key: rabbitmq-password
        - name: DL_LICENSE_KEY
          valueFrom: 
            secretKeyRef: 
              name: {{ .Release.Name }}-secret
              key: dl-license-key 
        - name: dlx.api.url
          valueFrom: 
            configMapKeyRef: 
              name: {{ .Release.Name }}-configmap
              key: dlx-api-url
        - name: dli.jwt.secret
          valueFrom: 
            secretKeyRef: 
              name: {{ .Release.Name }}-secret
              key: jwt-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: database-password
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: database-host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: database-port
        - name: access.token.header
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: access-token-header
        - name: jwt.issuer
          value: {{ .Values.jwt.issuer }}
        {{ if .Values.jwt.publicKey }}
        - name: jwt.privateKey
          value: /jwt-keys/private_key.pk8
        - name: jwt.publicKey
          value: /jwt-keys/public_key.pub
        {{ end }}
      {{- if .Values.global.serviceAccount.create }}
      serviceAccountName: auth-service
      {{- end }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
      - name: {{ . }}
      {{- end }}


